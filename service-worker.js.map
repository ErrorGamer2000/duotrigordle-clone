{"version":3,"sources":["service-worker.ts"],"names":["cacheName","assets","self","__WB_MANIFEST","addEventListener","e","ev","console","log","waitUntil","caches","open","then","cache","addAll","request","url","respondWith","match","response","fetch","put","clone","catch","error","Response","status","statusText"],"mappings":"YAAA,IAAM,EAAY,wBACZ,EAAS,CACb,aACA,+BACA,8BAIe,+NAAa,cAwB9B,KAAK,iBAAiB,WAAW,SAAC,GAChC,IAAI,EAAmB,EAEvB,QAAQ,IAAI,6DACZ,EAAG,UAAU,OAAO,KAAK,GAAW,MAAK,SAAC,GAAD,OAAW,EAAM,OAAO,UAInE,KAAK,iBAAiB,SAAS,SAAC,GAC9B,IAAM,EAAiB,EACvB,QAAQ,IAAI,mBAAoB,EAAG,QAAQ,KAC3C,EAAG,YACD,OACG,MAAM,EAAG,SACT,MAAK,SAAC,GACL,OAAI,GACF,QAAQ,IAAI,SAAU,EAAG,QAAQ,IAAK,aAC/B,IAET,QAAQ,IAAI,uBAAwB,EAAG,QAAQ,KACxC,MAAM,EAAG,SAAS,MAAK,SAAC,GAC7B,OAAO,OAAO,KAAK,GAAW,MAAK,SAAC,GAElC,OADA,EAAM,IAAI,EAAG,QAAQ,IAAK,EAAS,SAC5B,YAIZ,OAAM,SAAC,GACN,OAAO,IAAI,SAAS,KAAM,CACxB,OAAQ,IACR,WAAY","file":"service-worker.js","sourceRoot":"","sourcesContent":["const cacheName = \"duotrigordle-clone-v1\";\nconst assets = [\n  \"index.html\",\n  \"static/css/main.0ddedf10.css\",\n  \"static/js/main.db15fb37.js\"\n];\n\n// eslint-disable-next-line no-restricted-globals\nconst ignored = (self as any).__WB_MANIFEST;\n\ninterface ExtendableEvent extends Event {\n  waitUntil(fn: Promise<any>): void;\n}\n\ninterface Body {\n  arrayBuffer(): Promise<ArrayBuffer>;\n  blob(): Promise<Blob>;\n  formData(): Promise<FormData>;\n  json(): Promise<any>;\n  text(): Promise<string>;\n}\n\ninterface FetchEvent extends Event {\n  request: Request;\n  respondWith(response: Promise<Response> | Response): Promise<Response>;\n}\n\ninterface InstallEvent extends ExtendableEvent {\n  activeWorker: ServiceWorker;\n}\n\n// eslint-disable-next-line no-restricted-globals\nself.addEventListener(\"install\", (e) => {\n  let ev: InstallEvent = e as InstallEvent;\n\n  console.log(\"Attempting to initiate service worker and cache assets...\");\n  ev.waitUntil(caches.open(cacheName).then((cache) => cache.addAll(assets)));\n});\n\n// eslint-disable-next-line no-restricted-globals\nself.addEventListener(\"fetch\", (e) => {\n  const ev: FetchEvent = e as FetchEvent;\n  console.log(\"Fetch event for \", ev.request.url);\n  ev.respondWith(\n    caches\n      .match(ev.request)\n      .then((response) => {\n        if (response) {\n          console.log(\"Found \", ev.request.url, \" in cache\");\n          return response;\n        }\n        console.log(\"Network request for \", ev.request.url);\n        return fetch(ev.request).then((response) => {\n          return caches.open(cacheName).then((cache) => {\n            cache.put(ev.request.url, response.clone());\n            return response;\n          });\n        });\n      })\n      .catch((error) => {\n        return new Response(null, {\n          status: 404,\n          statusText: \"Not Cached\"\n        });\n      })\n  );\n});\n"]}